stages:
  - stage: checkStage
    displayName: Check Stage
    jobs:
      - job: checkJob
        continueOnError: false
        displayName: Check Variables
        steps:
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                if [ "$(Build.Reason)" == "PullRequest" ]; then
                  echo '⚠️ It is a Pull Request ⚠️'
                  echo '⚠️ Only this step and compile will be executed ⚠️'
                  echo ''
                  echo 'Build Reason: $(Build.Reason)'
                  echo 'Pull Request ID: $(System.PullRequest.PullRequestId)'
                  echo 'Target Branch: $(System.PullRequest.TargetBranch)'
                  echo 'Source Branch: $(System.PullRequest.SourceBranch)'
                else
                  echo 'Build Reason: $(Build.Reason)'
                  echo 'Source Branch: $(Build.SourceBranch)'
                  echo 'Source Branch Name: $(Build.SourceBranchName)'
                fi
            displayName: Check Variables

  - stage: buildStage
    displayName: Build Stage
    condition: succeeded('checkStage')
    jobs:
      - job: buildJob
        continueOnError: false
        displayName: Run Compile
        steps:
          # Install Node
          - task: NodeTool@0
            inputs:
              versionSpec: $(node-version)
            displayName: Install Node.js

          # Create Cache NPM Direcotry
          - script: |
              mkdir -p /home/vsts/work/1/.m2/npm
            displayName: Create Cache Directory

          # Cache NPM Dependencies
          - task: Cache@2
            displayName: Cache NPM
            inputs:
              key: 'npm | "$(Agent.OS)" | npm-cache'
              restoreKeys: |
                npm | "$(Agent.OS)"
              path: $(cache-npm-path)

          # Install Dependencies and Build the Project
          - script: |
              npm install
              npm run build
            workingDirectory: $(node-script-directory)
            displayName: Install Deps and Build App

          # Archive Build Artifact
          - task: ArchiveFiles@2
            displayName: Archive Build Artifacts
            inputs:
              rootFolderOrFile: $(archive-artifact-root-folder)
              includeRootFolder: false
              archiveType: $(archive-artifact-type)
              archiveFile: $(archive-artifact-file)
              replaceExistingArchive: true

          # Publish Build Artifact
          - task: PublishBuildArtifacts@1
            displayName: Publish Build Artifact
            inputs:
              pathToPublish: $(publish-artifact-path)
              artifactName: $(publish-artifact-name)

  - stage: deployStage
    displayName: Deploy Stage
    condition: succeeded('buildStage')
    jobs:
      - job: deployJob
        continueOnError: false
        displayName: Deploy
        steps:
          # Download Build Artifacts
          - task: DownloadBuildArtifacts@0
            displayName: Download Build Artifact
            inputs:
              artifactName: $(download-artifact-name)
              downloadPath: $(download-artifact-path)

          # Deploy to Azure WebApp
          - task: AzureStaticWebApp@0
            displayName: Deploy to Azure Static Web App
            inputs:
              app_location: '/'  
              api_location: ''
              output_location: ''  
              azure_static_web_apps_api_token: $(azure-static-web-app-token)
            